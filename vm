#!/bin/sh

QEMU="qemu-system-x86_64"
EFIFIRM=${VM_EFIFIRM:-"/usr/share/ovmf/OVMF.fd"}
HELPER=${VM_HELPER:-"/usr/lib/qemu/qemu-bridge-helper"}
VHOSTNET=${VM_VHOSNET:-"/dev/vhost-net"}
RAM=${VM_RAM:-512}
VNCPORT=5900
TELNETPORT=10000
SSHPORT=10022
MONITORPORT=2345
MCASTPORT=12345
PREMAC=${VM_PREMAC:-"de:ad:be:ef"}
NET=${VM_NET:-u}
VIDEO=${VM_VIDEO:-vga}
HDDRIVER=${VM_HDDRIVER:-virtio-scsi}
DAEMONIZE="&"

VM=$(realpath "$0")

help() {
   echo "$(basename "$0") [opciones|opciones_de_qemu] [--] [opciones_de_qemu]
  Script para arrancar máquina virtuales con QEmu.

Facilita el lanzamiento de qemu-system-x86_64 con la inclusión de algunas
opciones propias que simplifican las propias de QEmu. De menor a mayor
precedencia hay cuatro tipos de opciones:

+ Las prefijadas que añaden aceleración por hardware y 512MiB de RAM.
+ Las propias.
+ Las incluidas tras --, que serán pasadas sin modificación a
  qemu-system-x86_64.
+ Las anteriores a -- que no son propias y se pasan sin modificación a
  qemu-system-x86_64.

Opciones propias:

 -disk disco      Define como almacenamiento un archivo QCOW2, RAW, ISO o un
                  dispositivo de bloques. La opción puede repetirse y la
                  la prioridad en un arranque BIOS vendrá dada por el orden
                  en que se escriban. Pueden utilizarse los prefijos 'usb:' y
                  'cdrom:' para especificar la naturaleza del almacenamiento.
                  'cdrom:' no debería ser necesario en la mayor parte de casos.
 -display DISP    Salida para el anfitrión. Puede ser stdio (E/S estándar),
                  telnet[:puerto], vga (ventana gráfica), vnc, spice o none.
 -f               Mantiene la orden en primer plano para todas las salidas. Por
                  defecto sólo stdio lo hace.
 -h,-help         Muestra esta ayuda.
 -net RED         Define cómo se conectan las interfaces de red del anfitrión.
                  El argumento es 'none' (sin red) o una combinación de 'u'
                  (red de usuario), p (adaptador puente) y dígitos hexadecimales
                  (red interna). Por ejemplo, 'u05' define tres interfaces de
                  red, una en la red de usuario, otra en la red interna '0' y
                  una última en la red interna '5'. Si se añade el prefijo 'tap:'
                  ('tap:u05'), las redes internas se construirán con un puente
                  en vez de con un socket.
 -s               Simula la ejecución del script y muestra cuáles son las
                  órdenes necesarias para lanzar la máquina.
 -U               Establece firmware UEFI, en vez de BIOS.
 -usb V:P         Pasa al huésped el dispositivo USB de vendedor 'V' y producto
                  'P'.
 -v               Muestra las ordenes que se ejecutan.

Información adicional: 
  https://sio2sio2.github.io/doc-linux/98.apendice/05.virtual/02.software/01.completa/02.kvm/01.qemu/06.script.html
"
}


#
## Ejecuta o imprime una orden.
#
execute() {
   [ -n "$VERBOSE" ] && echo "$@" "$REDIRECT" > /dev/tty
   [ -z "$SIMULATE" ] && eval '"$@"' $REDIRECT
}


#
## Obtiene el primer puerto libre a partir del proporcionado
#
puerto_libre() {
   local ini="$1" candidato

   ss -H4ltn | awk -F":| +" -v "INI=$ini" '$5 >= INI {print $5}' | sort -n | {
      while read -r candidato; do
         [ $candidato -gt $ini ] && break
         ini=$((ini+1))
      done
      echo $ini
   }
}

#
## Provoca un error (con código $1) escribiendo un mensaje de salida ($2)
#
error() {
   local ERROR=$1
   shift

   echo "$*" >&2
   [ $ERROR -gt 0 ] && exit $ERROR
}

{ ## Análisis de argumentos
   #
   ## Determina si el primer argumento está incluido en el segundo
   #
   in_str() {
      expr "$2" : '.*\<'"$1"'\>' > /dev/null
   }


   case "$1" in
      -up|-down)
         NET="$1"
         VERBOSE="$2"
         SIMULATE="$3"
         shift 3
         ;;
      *)
         # Opciones con argumento
         REQ_ARG="dir disk display net usb"
         NUMARGS=$#

         while [ $NUMARGS -gt 0 ]; do
            case "$1" in
               -dir)
                  error 5 "'$1': opción aún no soportada"
                  SHARE="$2"
                  ;;
               -disk)
                  # Se apuntan al revés para que al procesarse
                  # acaben en el mismo orden en que se han escrito
                  DISCOS="$2${DISCOS:+
$DISCOS}"
                  ;;
               -display)
                  VIDEO="$2"
                  ;;
               -f)
                  DAEMONIZE=
                  ;;
               -h|-help)
                  help
                  exit 0
                  ;;
               -net)
                  NET="$2"
                  if [ "$NET" = "none" ]; then
                     NET=
                  # "-net tap:0123" provoca que las redes internas se hagan con tap, no con socket.
                  elif expr "$NET" : "tap:" > /dev/null; then
                     TAP=1
                     NET=${NET#tap:}
                  fi
                  NET=$(echo "$NET" | rev)
                  ;;
               -s)
                  SIMULATE=1
                  VERBOSE=1
                  DAEMONIZE=
                  ;;
               -U)
                  EFI=1
                  ;;
               -usb)
                  USB="$2${USB:+ $USB}"
                  ;;
               -v)
                  VERBOSE=1
                  ;;
               --) # Se acabaron los argumentos propios
                  shift
                  break
                  ;;
               *) # Lo que no sabemos qué es, se supondrá un parámetro de qemu-system
                  set -- "$@" "$1"
                  ;;
            esac
            DELARGS=1
            in_str "${1#-}" "$REQ_ARG" && DELARGS=2
            shift $DELARGS
            NUMARGS=$((NUMARGS-DELARGS))
         done

         if [ -n "$EFI" ]; then
            [ -r "$EFIFIRM" ] || error 4 "No se encuentra '$EFIFIRM'."
            set -- -bios "$EFIFIRM" "$@"
         fi
         ;;
   esac
}

{ ### Configuración de la red
   #
   ## Calcula una dirección MAC aleatoria
   #
   macaddress() {
      local bytes

      bytes=$(echo "$PREMAC" | wc -c)
      bytes=$((6-bytes/3))

      printf "%s" "$PREMAC"
      od -v -An -tx1 -N$bytes /dev/urandom | tr ' ' ':'
      echo
   }

   #
   ## Detecta cuál es la interfaz del anfitrión que conecta con el exterior
   #
   detecta_interfaz() {
      local riface iface="$(ip route show | awk '/^default via/  {print $NF}')"

      [ -n "$iface" ] || error 1 "Adaptador imposible: el anfitrión parece no conectar con el exterior."

      if [ -d "/sys/class/net/$iface/bridge" ];  then
         echo "$iface" bridge
      elif [ -d "/sys/class/net/$iface/macvtap"  ]; then
         # En realidad queremos la interfaz física
         iface="$(awk -F= '/^INTERFACE/ {print $2}' /sys/class/net/$iface/uevent)"
         echo "$iface" macvtap
      elif realpath "/sys/class/net/$iface" | grep -q "^/sys/devices/virtual"; then
         echo "$iface" "desconocida"
      else
         echo "$iface" "fisica"
      fi
   }

   #
   ## Busca una interfaz libre usando como nombre la plantilla proporcionada por $1
   #
   interfaz_libre() {
      local DIRCLASS="/sys/class/net/" num=0

      while true; do
         [ -d "$DIRCLASS$1$num" ] || break
         num=$((num+1))
      done

      echo "$1$num" 
   }

   ## El script se ejecutó con sudo para crear o destruir interfaces de  red
   case "$NET" in
      -up)
         case "$1" in
            bridge)
               execute ip link add name "$2" type bridge
               execute ip link set "$2" up
               exit $?
               ;;
            macvtap)
               mac=$(macaddress)
               echo "$2" | {
                  IFS="@" read -r ifname iface
                  execute ip link add link "$iface" name "$ifname" address "$mac" type macvtap mode bridge
                  execute ip link set "$ifname" up
                  if [ -n "$SIMULATE" ]; then
                     tap=/dev/tap$((0x$(openssl rand -hex 1)))
                  else
                     tap=/dev/tap$(cat "/sys/class/net/$ifname/ifindex")
                  fi
                  execute chown "$(logname)" "$tap"
                  echo "$mac" "$tap"  # Por si estamos simulando.
               }
               exit $?
               ;;
            *)
               error 1 "'$1': Tipo de interfaz no soportado"
               ;;
         esac
         ;;
      -down)  # Deben borrarse todas las interfaces.
         while [ $# -gt 0 ]; do
            execute ip link del "$1"
            shift
         done
         exit $?
         ;;
   esac

   USUARIO=
   num=0
   fd=3
   if [ -n "$TAP" ] || expr "$NET" : ".*p" > /dev/null; then  # Usamos tap o macvtap
      if ! grep -q 'vhost_net' /proc/modules; then
         error 0 "Módulo vhost_net no disponible. Se deshabilita el soporte para vhost-net."
      elif [ -w "$VHOSTNET" ]; then
         VHOSTNET_SUPPORT=1
      else
         error 0 "Sin permiso de escritura sobre $VHOSTNET. Se deshabilita el soporte para vhost-net."
      fi
   fi

   for tipo in $(echo "$NET" | grep -o '.'); do
      case "$tipo" in
         u)  # Red de usuario
            [ -n "$USUARIO" ] && error 0 "Se elimina una red de usuario duplicada"
            ssh_port=$(puerto_libre "$SSHPORT")
            set -- -device "virtio-net,netdev=nic$num,mac=$(macaddress)" \
               -netdev "user,id=nic$num,hostfwd=tcp:127.0.0.1:$ssh_port-:22" "$@"
            INFO="${INFO:+$INFO\n}Puerto SSH disponible en localhost:$ssh_port."
            USUARIO=1
            ;;
         p)  # Interfaz puente
            iface="$(detecta_interfaz)"
            tipo="${iface#* }"
            iface="${iface% *}"
            case "$tipo" in
               bridge)
                  extra=
                  if [ -n "$VHOSTNET_SUPPORT" ]; then
                     if [ -x "$HELPER" ]; then
                        extra=",vhost=on,vhostfd=$fd,helper=$HELPER"
                     else
                        error 0 "'$HELPER' no existe. Se deshabilita el soporte de vhost-net para la interfaz puente."
                     fi
                  fi
                  if [ -n "$extra" ]; then
                     set -- -device "virtio-net,netdev=nic$num,mac=$(macaddress)" -netdev "tap,id=nic$num,br=$iface$extra"
                     redirect="${redirect:+$redirect }$fd<>$VHOSTNET" "$@"
                     fd=$((fd+1))
                  else
                     set -- -device "virtio-net,netdev=nic$num,mac=$(macaddress)" -netdev "bridge,id=nic$num,br=$iface" "$@"
                  fi
                  ;;
               fisica|macvtap)
                  [ -z "$tipo" ] && error 0 "El huésped no podrá conectar con el anfitrión, porque la interfaz física es la configurada."
                  ifname=$(interfaz_libre macvtap)
                  mac=$(sudo "$VM" -up "$VERBOSE" "$SIMULATE" macvtap "$ifname@$iface")
                  #tap="/dev/tap$(cat "/sys/class/net/$ifname/ifindex")"
                  #mac=$(cat "/sys/class/net/$ifname/address")
                  tap=${mac#* }
                  mac=${mac% *}
                  redirect="${redirect:+$redirect }$fd<>$tap"
                  if [ -n "$VHOSTNET_SUPPORT" ]; then
                     extra=",fd=$fd,vhost=on,vhostfd=$((fd+1))"
                     redirect="${redirect:+$redirect }$((fd+1))<>$VHOSTNET"
                     fd=$((fd+1))
                  else
                     extra=",fd=$fd"
                  fi
                  set -- -device "virtio-net,netdev=nic$num,mac=$mac" -netdev "tap,id=nic$num$extra" "$@"
                  ifaces="${ifaces:+$ifaces }$ifname"
                  fd=$((fd+1))
                  ;;
               *)
                  error 1 "Adaptador puente imposible: La interfaz virtual '$iface' no está soportada."
                  ;;
            esac
            ;;
         [0-9a-f])  # Redes internas
            tipo=$((0x$tipo))
            if [ -z "$TAP" ]; then # Con socket.
               set -- -device "virtio-net,netdev=nic$num,mac=$(macaddress)" \
                  -netdev "socket,id=nic$num,mcast=230.0.0.$((tipo+1)):$MCASTPORT" "$@"
            else
               extra=
               if [ -n "$VHOSTNET_SUPPORT" ]; then
                  if [ -x "$HELPER" ]; then
                     extra=",vhost=on,vhostfd=$fd,helper=$HELPER"
                  else
                     error 0 "'$HELPER' no existe. Se deshabilita el soporte de vhost-net para la red interna $tipo."
                  fi
               fi
               bridge=vmnet$tipo
               if [ ! -d "/sys/class/net/$bridge" ]; then
                  sudo "$VM" -up "$VERBOSE" "$SIMULATE" bridge "$bridge"
                  ifaces="${ifaces:+$ifaces }$bridge"
               fi
               if [ -n "$extra" ]; then
                  set -- -device "virtio-net,netdev=nic$num,mac=$(macaddress)" -netdev "tap,id=nic$num,br=$bridge$extra" "$@"
                  redirect="${redirect:+$redirect }$fd<>$VHOSTNET"
                  fd=$((fd+1))
               else
                  set -- -device "virtio-net,netdev=nic$num,mac=$(macaddress)" -netdev "bridge,id=nic$num,br=$bridge" "$@"
               fi
            fi
            ;;
         *)
            error 3 "'$tipo': Tipo de red desconocida"
            ;;
      esac
      num=$((num+1))
   done
}

{ ## Genera los discos
   IFS='
'
bootindex=$(echo "$DISCOS" | wc -l)
numd=0
for d in $DISCOS; do
   bootindex=$((bootindex-1))
   media="${d%%:*}"
   d=${d#*:}
   case "$media" in
      "$d"|disk) media=hd ;;
      usb)     usbbus=xhciS ;;
      cdrom)   media=cd ;;
      *) error 4 "'$media': Tipo de dispositivo no soportado."
   esac
   if [ -f "$d" ]; then  # Archivo regular.
      blockdev="driver=file,node-name=dev$bootindex,filename=$d" 
      case "$(file -bL "$d" | grep -om1 '\<ISO 9660\>\|^DOS/MBR\>\|\<QCOW2\>')" in
         ISO\ 9660) [ "$media" = "hd" ] && media=cd ;;
         DOS/MBR) ;;  # RAW
         QCOW2) blockdev="driver=qcow2,node-name=dev$bootindex,file.driver=file,file.filename=$d,cache-size=16777216" ;;
         *) error 4 "'$d': Formato de disco desconocido." ;;
      esac
   elif [ -b "$d" ]; then  # Directamente un dispositivo (p.e. /dev/sr0)
      blockdev="drive=host_device,node-name=dev$bootindex,filename=$d"
      if [ "$media" = "hd" ]; then
         if [ "$(lsblk "$d" -no TYPE 2>/dev/null)" = "rom" ] ||  # Se identifica como óptico.
            [ "$(file -sbL --mime-type "$d")" = "application/x-iso9660-image" ]; then  # El sistema es ISO-9660
               media=cdrom
         fi
      fi
   elif [ "$media" = "usb" ] && expr "$d" : "^[0-9A-Fa-f]\+:[0-9A-Fa-F]\+$"; then
      USB="$d${USB:+ $USB}"
   else
      error 3 "'$d': Disco inexistente o no soportado"
   fi
   case "$media" in
      [hc]d) 
         if [ "$HDDRIVER" = "virtio-blk" ]; then
            case "$media" in
               hd) device="virtio-blk,drive=dev$bootindex,iothread=iothread0" ;;
               cd) device="ide-cd,drive=dev$bootindex" ;;
            esac
         else
            device="scsi-$media,drive=dev$bootindex,bus=scsi0.0,channel=0,scsi-id=0,lun=$numd"
            numd=$((numd+1))
         fi ;;
      usb) device="usb-storage,bus=$usbbus.0,drive=dev$bootindex" ;;
   esac
   [ -z "$EFI" ] && device="$device,bootindex=$bootindex"
   set -- -blockdev "$blockdev" -device "$device" "$@"
done
unset IFS
set -- -object iothread,id=iothread0 "$@"
[ $numd -gt 0 ] && [ "$HDDRIVER" != "virtio-blk" ] && set -- -device "virtio-scsi,id=scsi0,num_queues=4,iothread=iothread0" "$@"
[ -n "$usbbus" ] && set -- -device "qemu-xhci,id=$usbbus" "$@"
}

{ ## Salida de vídeo
   case "$VIDEO" in
      stdio)
         set -- -serial mon:stdio -display none "$@"
         INFO="${INFO:+$INFO\n}Redirigido el puerto serie a la E/S estándar."
         DAEMONIZE=
         ;;
      telnet*)
         telnet_port=${VIDEO#telnet}
         telnet="localhost${telnet_port:-:$(puerto_libre "$TELNETPORT")}"
         set -- -serial mon:telnet:$telnet,server=on,wait=off -display none "$@"
         INFO="${INFO:+$INFO\n}Redirigido el puerto serie a un servidor telnet escuchando en $telnet."
         ;;
      vga)
         set -- -device virtio-vga -display gtk,window-close=off -monitor vc "$@"
         ;;
      vnc)
         vnc_port=$(($(puerto_libre "$VNCPORT")-VNCPORT))
         set -- -device virtio-vga -display vnc=localhost:$vnc_port "$@"
         INFO="${INFO:+$INFO\n}Servidor VNC escuchando en localhost:$vnc_port."
         ;;
      spice)
         socket=$(mktemp -up /var/run --suffix=.socket)
         monitorport=$(puerto_libre "$MONITORPORT")
         set -- -device qxl-vga -spice "unix=on,addr=/tmp/${socket},disable-ticketing=on" -display spice-app \
            -device virtio-serial -device "virtserialport,chardev=spicechannel0,name=com.redhat.spice.0" \
            -chardev "spicevmc,id=spicechannel0,name=vdagent" -monitor "telnet:localhost:$monitorport,server=on,wait=off" "$@"
         INFO="${INFO:+$INFO\n}Servidor telnet para acceso al monitor escuchando en localhost:$monitorport"
         ;;
      none)
         set -- -display none "$@"
         ;;
      *)
         error 3 "'$VIDEO': Salida de vídeo no disponible"
   esac
}

{ ### Dispositivos USB
   for usb in $USB; do
      if lsusb | awk '{print $6}' | grep -q '^'"$usb"'$'; then
         set  -- -device "usb-host,usb=xhciH.0,vendorid=0x${usb%:*},productid=0x${usb#*:}" "$@"
      else
         error 3 "'$usb': Dispositivo USB inexistente"
      fi
   done
   [ -n "$USB" ] && set -- -device qemu-xhci,id=xhciH "$@"
}

printf "${INFO:+$INFO\n}"
eval '{
   REDIRECT="$redirect" execute "$QEMU" -nodefaults -machine accel=kvm -m "$RAM" "$@"
   sudo "$VM" -down "$VERBOSE" "$SIMULATE" $ifaces
}' $DAEMONIZE
